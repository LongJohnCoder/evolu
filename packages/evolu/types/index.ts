import { NonEmptyArray } from 'fp-ts/lib/NonEmptyArray';
import { Option } from 'fp-ts/lib/Option';
import { Newtype } from 'newtype-ts';
import { ReactDOM, ReactNode, Reducer as ReactReducer } from 'react';
import { $Values } from 'utility-types';
import { DOMNode } from './dom';

/**
 * Editor unique string ID generated by nanoid. ID is required for
 * meta-data, React keys, and CRDT.
 */
export interface NodeID
  extends Newtype<{ readonly NodeID: unique symbol }, string> {}

export interface WithNodeID {
  readonly id: NodeID;
}

/**
 * Editor text.
 */
export interface Text extends WithNodeID {
  readonly text: string;
}

/**
 * Editor element. The base for all other editor elements.
 */
export interface Element extends WithNodeID {
  readonly children: (Node)[];
}

export type Node = Element | Text;

export type PathIndex = number;

/**
 * Editor path can be resolved to Element, Text, or Text char.
 * Not readonly because https://github.com/gcanti/fp-ts/issues/987.
 */
export type Path = NonEmptyArray<PathIndex>;

export type PathMaybeEmpty = PathIndex[];

/**
 * Editor selection. It's like DOM Selection, but with Path for the anchor and the focus.
 * https://developer.mozilla.org/en-US/docs/Web/API/Selection
 */
export interface Selection {
  readonly anchor: Path;
  readonly focus: Path;
}

export interface NodeInfo {
  readonly node: Node;
  readonly path: Path;
  // readonly text: string;
  // readonly parents: NonEmptyArray<Element>;
  // readonly parentBlocks: NonEmptyArray<Element>;
  // readonly previousSibling: Option<Child>;
  // readonly nextSibling: Option<Child>;
  // readonly textOffset: Option<number>;
  // readonly allChildrenCount: number;
}

/**
 * Info is materialized selection. It provides useful computations for
 * toolbars and operations.
 */
export interface Info {
  // selection: Selection;
  // range: Range;
  nodes: NodeInfo[];
  // text: Node;
  // range position
}

/**
 * Editor value.
 */
export interface Value {
  readonly element: Element;
  readonly hasFocus: boolean;
  readonly selection: Option<Selection>;
  readonly info: Info;
}

/**
 * Editor action.
 */
export type Action =
  | { type: 'focus' }
  | { type: 'blur' }
  | { type: 'selectionChange'; selection: Selection; info: Info }
  | { type: 'insertText'; text: string; selection: Selection }
  | { type: 'deleteText'; text: string; selection: Selection }
  | { type: 'insertReplacementText'; text: string }
  | { type: 'deleteContent'; selection: Selection };

/**
 * Editor reducer.
 */
export type Reducer = ReactReducer<Value, Action>;

/**
 * Editor range. It's like DOM Range, but with editor path for the start and the end.
 * Range should be an implementation detail when an operation needs the direction.
 * https://developer.mozilla.org/en-US/docs/Web/API/Range
 */
export interface Range {
  readonly start: Path;
  readonly end: Path;
}

export type DOMNodeOffset = [DOMNode, number];

export type GetDOMNodeByPath = (path: PathMaybeEmpty) => Option<DOMNode>;

export type GetPathByDOMNode = (domNode: DOMNode) => Option<PathMaybeEmpty>;

export type SetDOMNodePathRef = (node: DOMNode | null) => void;

export type SetDOMNodePath = (
  operation: 'add' | 'remove',
  node: DOMNode,
  path: PathMaybeEmpty,
) => void;

export type RenderElement = (
  element: Element,
  children: ReactNode,
  ref: SetDOMNodePathRef,
) => ReactNode;

export type AfterTyping = (callback: () => void) => void;

interface ReactElementFactory<T, P> extends Element {
  readonly tag: T;
  readonly props?: P;
  readonly children: (ReactElement | Text)[];
}

/**
 * Editor React-like element. It has tag and props.
 */
export type ReactElement = $Values<
  {
    [T in keyof ReactDOM]: ReactElementFactory<
      T,
      ReturnType<ReactDOM[T]>['props']
    >;
  }
>;

type ReactDivAtttributesUsefulForEditor = Pick<
  React.HTMLAttributes<HTMLDivElement>,
  | 'accessKey'
  | 'autoCorrect'
  | 'className'
  | 'id'
  | 'role'
  | 'spellCheck'
  | 'style'
  | 'tabIndex'
>;

export interface EditorProps extends ReactDivAtttributesUsefulForEditor {
  readonly value: Value;
  readonly onChange: (value: Value) => void;
  readonly renderElement?: RenderElement;
  readonly reducer?: Reducer;
}

export interface EditorRef {
  readonly focus: () => void;
  readonly createInfo: (selection: Selection) => Info;
  // TODO: findDOMNodeByPath, computeInfo, etc.
}

// TODO: Fragment, probably Child[].
